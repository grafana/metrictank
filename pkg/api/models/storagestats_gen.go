package models

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *StorageStats) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CacheMiss":
			z.CacheMiss, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "CacheMiss")
				return
			}
		case "CacheHitPartial":
			z.CacheHitPartial, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "CacheHitPartial")
				return
			}
		case "CacheHit":
			z.CacheHit, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "CacheHit")
				return
			}
		case "ChunksFromTank":
			z.ChunksFromTank, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "ChunksFromTank")
				return
			}
		case "ChunksFromCache":
			z.ChunksFromCache, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "ChunksFromCache")
				return
			}
		case "ChunksFromStore":
			z.ChunksFromStore, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "ChunksFromStore")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *StorageStats) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "CacheMiss"
	err = en.Append(0x86, 0xa9, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x69, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.CacheMiss)
	if err != nil {
		err = msgp.WrapError(err, "CacheMiss")
		return
	}
	// write "CacheHitPartial"
	err = en.Append(0xaf, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.CacheHitPartial)
	if err != nil {
		err = msgp.WrapError(err, "CacheHitPartial")
		return
	}
	// write "CacheHit"
	err = en.Append(0xa8, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.CacheHit)
	if err != nil {
		err = msgp.WrapError(err, "CacheHit")
		return
	}
	// write "ChunksFromTank"
	err = en.Append(0xae, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x6e, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.ChunksFromTank)
	if err != nil {
		err = msgp.WrapError(err, "ChunksFromTank")
		return
	}
	// write "ChunksFromCache"
	err = en.Append(0xaf, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.ChunksFromCache)
	if err != nil {
		err = msgp.WrapError(err, "ChunksFromCache")
		return
	}
	// write "ChunksFromStore"
	err = en.Append(0xaf, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.ChunksFromStore)
	if err != nil {
		err = msgp.WrapError(err, "ChunksFromStore")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StorageStats) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "CacheMiss"
	o = append(o, 0x86, 0xa9, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x69, 0x73, 0x73)
	o = msgp.AppendUint32(o, z.CacheMiss)
	// string "CacheHitPartial"
	o = append(o, 0xaf, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c)
	o = msgp.AppendUint32(o, z.CacheHitPartial)
	// string "CacheHit"
	o = append(o, 0xa8, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74)
	o = msgp.AppendUint32(o, z.CacheHit)
	// string "ChunksFromTank"
	o = append(o, 0xae, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x6e, 0x6b)
	o = msgp.AppendUint32(o, z.ChunksFromTank)
	// string "ChunksFromCache"
	o = append(o, 0xaf, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65)
	o = msgp.AppendUint32(o, z.ChunksFromCache)
	// string "ChunksFromStore"
	o = append(o, 0xaf, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x65)
	o = msgp.AppendUint32(o, z.ChunksFromStore)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StorageStats) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CacheMiss":
			z.CacheMiss, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CacheMiss")
				return
			}
		case "CacheHitPartial":
			z.CacheHitPartial, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CacheHitPartial")
				return
			}
		case "CacheHit":
			z.CacheHit, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CacheHit")
				return
			}
		case "ChunksFromTank":
			z.ChunksFromTank, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChunksFromTank")
				return
			}
		case "ChunksFromCache":
			z.ChunksFromCache, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChunksFromCache")
				return
			}
		case "ChunksFromStore":
			z.ChunksFromStore, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChunksFromStore")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StorageStats) Msgsize() (s int) {
	s = 1 + 10 + msgp.Uint32Size + 16 + msgp.Uint32Size + 9 + msgp.Uint32Size + 15 + msgp.Uint32Size + 16 + msgp.Uint32Size + 16 + msgp.Uint32Size
	return
}
